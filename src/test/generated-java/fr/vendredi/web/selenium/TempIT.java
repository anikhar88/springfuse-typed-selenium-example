/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/ScenarioIT.p.vm.java
 */
package fr.vendredi.web.selenium;

import static com.google.common.collect.Lists.newArrayList;
import static com.palominolabs.xpath.XPathUtils.getXPathString;
import static org.fest.assertions.Assertions.assertThat;

import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.lang.time.StopWatch;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import fr.vendredi.domain.Civility;
import fr.vendredi.web.selenium.support.Page;
import fr.vendredi.web.selenium.support.WebClient;
import fr.vendredi.web.selenium.support.WebClientRule;
import fr.vendredi.web.selenium.support.element.Autocomplete;
import fr.vendredi.web.selenium.support.element.CustomElement;
import fr.vendredi.web.selenium.support.element.DateRange;
import fr.vendredi.web.selenium.support.element.DateTimeRange;
import fr.vendredi.web.selenium.support.element.ManyBooleans;
import fr.vendredi.web.selenium.support.element.ManyEnums;

@SuppressWarnings("unused")
public class TempIT {
	@Rule
	public WebClientRule webClientRule = new WebClientRule(this);
	protected WebClient webClient;

	@Before
	public void setup() {
		webClient = webClientRule.getWebClient();
	}

	public static class Button extends CustomElement {
		public Button(String id) {
			super(id);
		}

		public void click() {
			webClient.click(By.id(id));
		}
	}

	public static class Checkbox extends CustomElement {
		public Checkbox(String id) {
			super(id);
		}

		public void enable() {
			if (isDisabled()) {
				webClient.click(By.id(id));
			}
		}

		public void disable() {
			if (isEnabled()) {
				webClient.click(By.id(id));
			}
		}

		public boolean isDisabled() {
			return !isEnabled();
		}

		public boolean isEnabled() {
			return Boolean.valueOf(webClient.find(By.id(id)).getAttribute("checked"));
		}
	}

	public static class ChooseEnum<T extends Enum<? extends Enum<?>>> extends CustomElement {
		public ChooseEnum(String id) {
			super(id);
		}

		public void select(T value) {
			String xpathExpression = "//label[@for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")" + "]";
			webClient.click(By.xpath(xpathExpression));
		}

		public boolean isSelected(T value) {
			String xpathExpression = "//input[@type='radio' and @for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")" + "]";
			return webClient.find(By.xpath(xpathExpression)).isSelected();
		}
	}

	public static class ListBox extends CustomElement {
		public ListBox(String id) {
			super(id);
		}

		private List<WebElement> getOptions() {
			String xpath = "//select[@id=" + getXPathString(id) + "]/option";
			return webClient.findAll(By.xpath(xpath));

		}

		public List<String> texts() {
			List<String> ret = newArrayList();
			for (WebElement webElement : getOptions()) {
				ret.add(webElement.getText());
			}
			return ret;
		}

		public List<String> selectedTexts() {
			List<String> ret = newArrayList();
			for (WebElement webElement : getOptions()) {
				if (webElement.isSelected()) {
					ret.add(webElement.getText());
				}
			}
			return ret;
		}

		public List<String> selectedValues() {
			List<String> ret = newArrayList();
			for (WebElement webElement : getOptions()) {
				if (webElement.isSelected()) {
					ret.add(webElement.getAttribute("value"));
				}
			}
			return ret;
		}

		public List<String> values() {
			List<String> ret = newArrayList();
			String xpath = "//select[@id=" + getXPathString(id) + "]/option";
			for (WebElement webElement : getOptions()) {
				ret.add(webElement.getAttribute("value"));
			}
			return ret;
		}

		public void text(String... texts) {
			for (String text : texts) {
				String xpath = "//select[@id=" + getXPathString(id) + "]/option[contains(text(), " + getXPathString(text) + ")]";
				webClient.click(By.xpath(xpath));
			}
		}

		public void value(String... values) {
			for (String value : values) {
				String xpath = "//select[@id=" + getXPathString(id) + "]/option[contains(@value, " + getXPathString(value) + ")]";
				webClient.click(By.xpath(xpath));
			}
		}
		
		public void selectAll() {
			for (WebElement webElement : getOptions()) {
				if (!webElement.isSelected()) {
					webClient.click(webElement);
				}
			}
		}

		public void unselectAll() {
			for (WebElement webElement : getOptions()) {
				if (webElement.isSelected()) {
					webClient.click(webElement);
				}
			}
		}

	}

	public static class StringInput extends Input<String> {
		public StringInput(String id) {
			super(id);
		}

		public void type(String value) {
			typeString(value);
		}

		public String value() {
			return valueAttribute();
		}
	}

	public static class IntegerInput extends Input<Integer> {
		public IntegerInput(String id) {
			super(id);
		}

		public void type(Integer value) {
			typeString(value.toString());
		}

		public Integer value() {
			return Integer.valueOf(valueAttribute());
		}

		public boolean hasValue() {
			return NumberUtils.isNumber(valueAttribute());
		}
	}

	public static abstract class Input<T> extends CustomElement {
		public Input(String id) {
			super(id);
		}

		public abstract void type(T value);

		public abstract T value();

		protected void typeString(String value) {
			webClient.fill(By.id(id), value);
		}

		protected String valueAttribute() {
			return webClient.find(By.id(id)).getAttribute("value");
		}
	}

	public static class Login extends CustomElement {
		StringInput username = new StringInput("j_username");
		StringInput password = new StringInput("j_password");
		Button loginButton = new Button("login");

		public void enter() {
			username.type("admin");
			password.type("admin");
			loginButton.click();
		}
	}

	public static class Tests extends CustomElement {
		Autocomplete homeAddress = new Autocomplete("homeAddressSelector");
		ManyEnums<Civility> chooseEnums = new ManyEnums<Civility>(Civility.class, "civility");
		ManyBooleans chooseBooleans = new ManyBooleans("isEnabled");
		DateRange dateRange = new DateTimeRange("birthDate");
		Checkbox enabled = new Checkbox("isEnabled2");
		ChooseEnum<Civility> chooseEnum = new ChooseEnum<Civility>("civility2");
		IntegerInput age = new IntegerInput("j_password");
		ListBox food = new ListBox("food");
	}

	@Page
	public static class LoginPage {
		Login login;
		Tests tests;
	}

	LoginPage loginPage;

	@Test
	public void enums() throws InterruptedException {
		webClient.page("/login.faces?locale=en");
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		webClient.message("ceci cela");
		// listBox();
		// autocomplete();
		// chooseEnums();
		// chooseBooleans();
		// dateRange();
		// typedInput();
		// login();
		stopWatch.stop();
		System.out.println("----------------------");
		System.out.println(stopWatch.toString());
		TimeUnit.SECONDS.sleep(5);
	}

	private void listBox() {
		assertThat(loginPage.tests.food.selectedValues()).isEmpty();
		assertThat(loginPage.tests.food.values()).hasSize(3).containsExactly("Fry Checken", "Tomyam Soup", "Mixed Rice");
		assertThat(loginPage.tests.food.selectedTexts()).isEmpty();
		assertThat(loginPage.tests.food.texts()).hasSize(3).containsExactly("Food1 - Fry Checken", "Food1 - Tomyam Soup", "Food1 - Mixed Rice");
		loginPage.tests.food.text("Food1 - Fry Checken");
		assertThat(loginPage.tests.food.selectedTexts()).hasSize(1).contains("Food1 - Fry Checken");
		assertThat(loginPage.tests.food.selectedValues()).hasSize(1).contains("Fry Checken");
		loginPage.tests.food.value("Tomyam Soup");
		assertThat(loginPage.tests.food.selectedValues()).hasSize(2).contains("Fry Checken", "Tomyam Soup");
		loginPage.tests.food.unselectAll();
		assertThat(loginPage.tests.food.selectedValues()).isEmpty();
		loginPage.tests.food.selectAll();
		assertThat(loginPage.tests.food.selectedValues()).hasSize(3).containsExactly("Fry Checken", "Tomyam Soup", "Mixed Rice");
	}

	private void login() {
		System.out.println("Username is " + loginPage.login.username.value());
		loginPage.login.username.type("toto");
		System.out.println("Username is " + loginPage.login.username.value());
		loginPage.login.enter();
	}

	private void typedInput() {
		loginPage.tests.age.type(12);
		assertThat(loginPage.tests.age.value()).isEqualTo(12);
	}

	private void dateRange() {
		loginPage.tests.dateRange.from(new Date());
	}

	private void chooseBooleans() {
		loginPage.tests.chooseBooleans.choose(true);
		loginPage.tests.chooseBooleans.choose(true, false);
	}

	private void chooseEnums() {
		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
		loginPage.tests.chooseEnum.select(Civility.MR);
		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
		loginPage.tests.chooseEnum.select(Civility.MS);
		loginPage.tests.chooseEnum.select(Civility.MR);
		loginPage.tests.chooseEnums.values();
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isFalse();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.values();
	}

	private void autocomplete() {
		assertThat(loginPage.tests.homeAddress.autocompleteValues("ii")).hasSize(2).containsExactly("Paris", "San Francisco");
		loginPage.tests.homeAddress.autocomplete("Par", "Paris");
		loginPage.tests.homeAddress.autocomplete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).containsExactly("Paris", "New-York");
		loginPage.tests.homeAddress.reset();
		assertThat(loginPage.tests.homeAddress.values()).isEmpty();
		loginPage.tests.homeAddress.delete("Paris");
		loginPage.tests.homeAddress.autocomplete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).containsExactly("New-York");
		loginPage.tests.homeAddress.delete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).isEmpty();
	}

}
