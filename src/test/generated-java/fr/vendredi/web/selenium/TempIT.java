/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/ScenarioIT.p.vm.java
 */
package fr.vendredi.web.selenium;

import static com.palominolabs.xpath.XPathUtils.getXPathString;
import static org.fest.assertions.Assertions.assertThat;

import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.time.StopWatch;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;

import fr.vendredi.domain.Civility;
import fr.vendredi.web.selenium.support.Page;
import fr.vendredi.web.selenium.support.WebClient;
import fr.vendredi.web.selenium.support.WebClientRule;
import fr.vendredi.web.selenium.support.element.Autocomplete;
import fr.vendredi.web.selenium.support.element.CustomElement;
import fr.vendredi.web.selenium.support.element.DateRange;
import fr.vendredi.web.selenium.support.element.DateTimeRange;
import fr.vendredi.web.selenium.support.element.ManyBooleans;
import fr.vendredi.web.selenium.support.element.ManyEnums;

public class TempIT {
	@Rule
	public WebClientRule webClientRule = new WebClientRule(this);
	protected WebClient webClient;

	@Before
	public void setup() {
		webClient = webClientRule.getWebClient();
	}

	public static class Button extends CustomElement {
		public Button(String id) {
			super(id);
		}

		public void click() {
			webClient.click(By.id(id));
		}
	}

	public static class Checkbox extends CustomElement {
		public Checkbox(String id) {
			super(id);
		}

		public void enable() {
			if (isDisabled()) {
				webClient.click(By.id(id));
			}
		}

		public void disable() {
			if (isEnabled()) {
				webClient.click(By.id(id));
			}
		}

		public boolean isDisabled() {
			return !isEnabled();
		}

		public boolean isEnabled() {
			return Boolean.valueOf(webClient.find(By.id(id)).getAttribute("checked"));
		}
	}

	public static class ChooseEnum<T extends Enum<? extends Enum<?>>> extends CustomElement {
		public ChooseEnum(String id) {
			super(id);
		}

		public void select(T value) {
			String xpathExpression = "//label[@for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")" + "]";
			webClient.click(By.xpath(xpathExpression));
		}

		public boolean isSelected(T value) {
			String xpathExpression = "//input[@type='radio' and @for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")" + "]";
			return webClient.find(By.xpath(xpathExpression)).isSelected();
		}
	}

	public static class Input extends CustomElement {
		public Input(String id) {
			super(id);
		}

		public void type(String value) {
			webClient.fill(By.id(id), value);
		}

		public String value() {
			return webClient.find(By.id(id)).getAttribute("value");
		}
	}

	public static class Login extends CustomElement {
		Input username = new Input("j_username");
		Input password = new Input("j_password");
		Button loginButton = new Button("login");

		public void enter() {
			username.type("admin");
			password.type("admin");
			loginButton.click();
		}
	}

	public static class Tests extends CustomElement {
		Autocomplete homeAddress = new Autocomplete("homeAddressSelector");
		ManyEnums<Civility> chooseEnums = new ManyEnums<Civility>(Civility.class, "civility");
		ManyBooleans chooseBooleans = new ManyBooleans("isEnabled");
		DateRange dateRange = new DateTimeRange("birthDate");
		Checkbox enabled = new Checkbox("isEnabled2");
		ChooseEnum<Civility> chooseEnum = new ChooseEnum<Civility>("civility2");
	}

	@Page
	public static class LoginPage {
		Login login;
		Tests tests;
	}

	LoginPage loginPage;

	@Test
	public void enums() throws InterruptedException {
		webClient.page("/login.faces?locale=en");
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		 
//		loginPage.tests.homeAddress.values();
//		loginPage.tests.homeAddress.autocomplete("Paris");
//		loginPage.tests.homeAddress.autocomplete("New-York");
//		loginPage.tests.homeAddress.values();
//		loginPage.tests.homeAddress.delete("Paris");
//		loginPage.tests.homeAddress.delete("New-York");
//		loginPage.tests.homeAddress.values();
//		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
//		loginPage.tests.chooseEnum.select(Civility.MR);
//		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
//		loginPage.tests.chooseEnum.select(Civility.MS);
//		loginPage.tests.chooseEnum.select(Civility.MR);
//		System.out.println("Username is " + loginPage.login.username.value());
//		loginPage.login.username.type("toto");
//		System.out.println("Username is " + loginPage.login.username.value());
//		loginPage.tests.chooseBooleans.choose(true);
		loginPage.tests.chooseEnums.values();
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isFalse();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.values();
//		loginPage.tests.chooseBooleans.choose(true, false);
//		loginPage.tests.dateRange.from(new Date());
//		loginPage.login.enter();
		stopWatch.stop();
		System.out.println("----------------------");
		System.out.println(stopWatch.toString());
		TimeUnit.SECONDS.sleep(5);
	}
}
