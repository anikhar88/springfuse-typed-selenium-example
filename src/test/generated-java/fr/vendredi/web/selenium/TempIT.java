/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/ScenarioIT.p.vm.java
 */
package fr.vendredi.web.selenium;

import static org.fest.assertions.Assertions.assertThat;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.time.StopWatch;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.By;

import fr.vendredi.domain.Civility;
import fr.vendredi.web.selenium.support.Page;
import fr.vendredi.web.selenium.support.WebClient;
import fr.vendredi.web.selenium.support.WebClientRule;
import fr.vendredi.web.selenium.support.element.Autocomplete;
import fr.vendredi.web.selenium.support.element.Button;
import fr.vendredi.web.selenium.support.element.Checkbox;
import fr.vendredi.web.selenium.support.element.ChooseEnum;
import fr.vendredi.web.selenium.support.element.CustomElement;
import fr.vendredi.web.selenium.support.element.DateRange;
import fr.vendredi.web.selenium.support.element.DateTimeRange;
import fr.vendredi.web.selenium.support.element.IntegerInput;
import fr.vendredi.web.selenium.support.element.ListBox;
import fr.vendredi.web.selenium.support.element.ManyBooleans;
import fr.vendredi.web.selenium.support.element.ManyEnums;
import fr.vendredi.web.selenium.support.element.OrderBy;
import fr.vendredi.web.selenium.support.element.Paginator;
import fr.vendredi.web.selenium.support.element.SaveSearch;
import fr.vendredi.web.selenium.support.element.StringInput;
import fr.vendredi.web.selenium.support.element.TableAction;

@SuppressWarnings("unused")
public class TempIT {
	@Rule
	public WebClientRule webClientRule = new WebClientRule(this);
	protected WebClient webClient;

	@Before
	public void setup() {
		webClient = webClientRule.getWebClient();
	}

	public static class Login extends CustomElement {
		StringInput username = new StringInput("j_username");
		StringInput password = new StringInput("j_password");
		Button loginButton = new Button("login");
	}

	public static class Tests extends CustomElement {
		Autocomplete homeAddress = new Autocomplete("homeAddressSelector");
		ManyEnums<Civility> chooseEnums = new ManyEnums<Civility>(Civility.class, "civility");
		ManyBooleans chooseBooleans = new ManyBooleans("isEnabled");
		DateRange dateRange = new DateTimeRange("birthDate");
		Checkbox enabled = new Checkbox("isEnabled2");
		ChooseEnum<Civility> chooseEnum = new ChooseEnum<Civility>("civility2");
		IntegerInput age = new IntegerInput("j_password");
		ListBox food = new ListBox("food");
	}

	@Page
	public static class LoginPage {
		Login login;
		Tests tests;
	}

	public static class Table extends CustomElement {
		public Table(String id) {
			super(id);
		}
	}

	public static class SearchAction extends CustomElement {
		Autocomplete username = new Autocomplete("form:username");
		SaveSearch saveSearch = new SaveSearch("form:searchFormName");

		public void search() {
			webClient.click(By.id("form:search"));
		}

		public void reset() {
			webClient.click(By.id("form:resetSearch"));
			try {
				TimeUnit.MILLISECONDS.sleep(400);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		public void excel() {
			// webClient.click(By.id("form:excel"));
		}

		public void saveSearch() {
		}
	}

	public static class AccountTable extends CustomElement {
		OrderBy username = new OrderBy("account_username");
		Paginator paginator;
		TableAction actions;
		SearchAction searchactions;
	}

	@Page
	public static class SearchPage {
		AccountTable accountTable;
	}

	SearchPage searchPage;
	LoginPage loginPage;

	@Test
	public void table() throws InterruptedException {
		try {
			webClient.page("/login.faces?locale=en");
			StopWatch stopWatch = new StopWatch();
			stopWatch.start();

			webClient.webDriver.manage().deleteAllCookies();
			login();

			webClient.click(By.id("form:selectAccounts"));
			searchPage.accountTable.searchactions.reset();
			searchPage.accountTable.searchactions.username.autocomplete("user04");
			searchPage.accountTable.searchactions.search();
			assertThat(searchPage.accountTable.paginator.size()).isEqualTo(1);
			searchPage.accountTable.searchactions.reset();
			assertThat(searchPage.accountTable.paginator.size()).isEqualTo(53);
			searchPage.accountTable.searchactions.excel();
			assertThat(searchPage.accountTable.searchactions.saveSearch.values()).isEmpty();
			searchPage.accountTable.searchactions.username.autocomplete("admin");
			searchPage.accountTable.searchactions.saveSearch.save("admin-search");
			assertThat(searchPage.accountTable.searchactions.saveSearch.values()).hasSize(1).contains("admin-search");

			if (false) {
				assertThat(searchPage).isNotNull();
				assertThat(searchPage.accountTable.username.isUp()).isFalse();
				assertThat(searchPage.accountTable.username.isDown()).isFalse();
				searchPage.accountTable.username.up();
				assertThat(searchPage.accountTable.username.isUp()).isTrue();
				assertThat(searchPage.accountTable.username.isDown()).isFalse();
				searchPage.accountTable.username.up();
				assertThat(searchPage.accountTable.username.isUp()).isTrue();
				assertThat(searchPage.accountTable.username.isDown()).isFalse();
				searchPage.accountTable.username.down();
				assertThat(searchPage.accountTable.username.isDown()).isTrue();
				assertThat(searchPage.accountTable.username.isUp()).isFalse();
				searchPage.accountTable.username.up();

				searchPage.accountTable.actions.view("admin");
				webClient.webDriver.navigate().back();
				searchPage.accountTable.actions.edit("admin");
				webClient.webDriver.navigate().back();
				searchPage.accountTable.actions.delete("user04");
			}

			stopWatch.stop();
			System.out.println("----------------------");
			System.out.println(stopWatch.toString());
		} catch (Throwable e) {
			e.printStackTrace();
			TimeUnit.SECONDS.sleep(5);
		}
	}

	@Test
	@Ignore
	public void enums() throws InterruptedException {
		webClient.page("/login.faces?locale=en");
		StopWatch stopWatch = new StopWatch();
		stopWatch.start();
		webClient.message("ceci cela");
		
		// listBox();
		// autocomplete();
		// chooseEnums();
		// chooseBooleans();
		// dateRange();
		// typedInput();
		// login();
		stopWatch.stop();
		System.out.println("----------------------");
		System.out.println(stopWatch.toString());
		TimeUnit.SECONDS.sleep(5);
	}

	private void listBox() {
		assertThat(loginPage.tests.food.selectedValues()).isEmpty();
		assertThat(loginPage.tests.food.values()).hasSize(3).containsExactly("Fry Checken", "Tomyam Soup", "Mixed Rice");
		assertThat(loginPage.tests.food.selectedTexts()).isEmpty();
		assertThat(loginPage.tests.food.texts()).hasSize(3).containsExactly("Food1 - Fry Checken", "Food1 - Tomyam Soup", "Food1 - Mixed Rice");
		loginPage.tests.food.text("Food1 - Fry Checken");
		assertThat(loginPage.tests.food.selectedTexts()).hasSize(1).contains("Food1 - Fry Checken");
		assertThat(loginPage.tests.food.selectedValues()).hasSize(1).contains("Fry Checken");
		loginPage.tests.food.value("Tomyam Soup");
		assertThat(loginPage.tests.food.selectedValues()).hasSize(2).contains("Fry Checken", "Tomyam Soup");
		loginPage.tests.food.unselectAll();
		assertThat(loginPage.tests.food.selectedValues()).isEmpty();
		loginPage.tests.food.selectAll();
		assertThat(loginPage.tests.food.selectedValues()).hasSize(3).containsExactly("Fry Checken", "Tomyam Soup", "Mixed Rice");
	}

	private void login() {
		webClient.page("/login.faces?locale=en");
		assertThat(loginPage.login.username.value()).isEmpty();
		loginPage.login.username.type("toto");
		assertThat(loginPage.login.username.value()).isEqualTo("toto");
		loginPage.login.username.type("admin");
		loginPage.login.password.type("admin");
		loginPage.login.loginButton.click();
		System.out.println("logged in");
	}

	private void typedInput() {
		loginPage.tests.age.type(12);
		assertThat(loginPage.tests.age.value()).isEqualTo(12);
	}

	private void dateRange() {
		loginPage.tests.dateRange.from(new Date());
	}

	private void chooseBooleans() {
		loginPage.tests.chooseBooleans.choose(true);
		loginPage.tests.chooseBooleans.choose(true, false);
	}

	private void chooseEnums() {
		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
		loginPage.tests.chooseEnum.select(Civility.MR);
		System.out.println(loginPage.tests.chooseEnum.isSelected(Civility.MR));
		loginPage.tests.chooseEnum.select(Civility.MS);
		loginPage.tests.chooseEnum.select(Civility.MR);
		loginPage.tests.chooseEnums.values();
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isFalse();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MR);
		assertThat(loginPage.tests.chooseEnums.isSelected(Civility.MR)).isTrue();
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.choose(Civility.MS);
		loginPage.tests.chooseEnums.values();
	}

	private void autocomplete() {
		assertThat(loginPage.tests.homeAddress.autocompleteValues("ii")).hasSize(2).containsExactly("Paris", "San Francisco");
		loginPage.tests.homeAddress.autocomplete("Par", "Paris");
		loginPage.tests.homeAddress.autocomplete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).containsExactly("Paris", "New-York");
		loginPage.tests.homeAddress.reset();
		assertThat(loginPage.tests.homeAddress.values()).isEmpty();
		loginPage.tests.homeAddress.delete("Paris");
		loginPage.tests.homeAddress.autocomplete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).containsExactly("New-York");
		loginPage.tests.homeAddress.delete("New-York");
		assertThat(loginPage.tests.homeAddress.values()).isEmpty();
	}

}
