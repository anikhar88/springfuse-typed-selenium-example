/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-selenium-primefaces:src/test/java/selenium/ScenarioIT.p.vm.java
 */
package fr.vendredi.web.selenium;

import org.junit.Test;

import fr.vendredi.web.selenium.page.account.AccountEditPage;
import fr.vendredi.web.selenium.page.account.AccountSearchPage;
import fr.vendredi.web.selenium.page.document.DocumentEditPage;
import fr.vendredi.web.selenium.page.document.DocumentSearchPage;
import fr.vendredi.web.selenium.page.role.RoleSearchPage;
import fr.vendredi.web.selenium.page.role.RoleEditPage;
import fr.vendredi.web.selenium.support.SeleniumTest;

public class ScenarioIT extends SeleniumTest {
    // account
    AccountSearchPage accountSearchPage;
    AccountEditPage accountEditPage;

    // document
    DocumentSearchPage documentSearchPage;
    DocumentEditPage documentEditPage;

    // role
    RoleSearchPage roleSearchPage;
    RoleEditPage roleEditPage;

    @Test
    public void asAnAdminICanUpdateAUserAndLogInWithThisUpdatedUser() {
        String userName = "homer";
        englishHomePage();
        loginAsAnAdmin();
        loggedHomePage.accounts();
        searchAndEditAccount(userName);
        logout();
        loginAsPreviouslyModifiedUser();
        logout();
        loginAsAnAdmin();
        revertChangesDoneToUser(userName);
    }

    private void searchAndEditAccount(String userName) {
        selectAccount(userName);
        updateAccount("cnorris", "kickass", "gmail@chucknorris.com");
        addRoleAdminToAccount();
        createRoleGodToAccount();
        addDocumentToAccount();
        saveToDatabase("cnorris");
    }

    private void updateAccount(String userName, String password, String email) {
        accountEditPage.hasText("Username");
        accountEditPage.update(userName, password, email);
    }

    private void selectAccount(String userName) {
        webClient.step("Search by username, select the user, and update its value");
        accountSearchPage.searchByUsername(userName);
        accountSearchPage.hasText(userName + "@example.com");
        accountSearchPage.edit(userName);
    }

    private void addRoleAdminToAccount() {
        webClient.step("Add a ROLE_ADMIN to the selected user");
        accountEditPage.securityRoles.select();
        accountEditPage.securityRoles.search();
        roleSearchPage.searchByRolename("ADMIN");
        roleSearchPage.paginator.hasSize(1);
        roleSearchPage.select("ROLE_ADMIN");
        accountEditPage.hasMessage("ROLE_ADMIN: Selected existing and added it, but not saved in database");
    }

    private void createRoleGodToAccount() {
        webClient.step("Create a ROLE_GOD for the the selected user");
        accountEditPage.securityRoles.add();
        webClient.fill(roleEditPage.roleName, "ROLE_GOD");
        accountEditPage.ok();
        accountEditPage.hasMessage("ROLE_GOD: Created and added, but not saved in database");
    }

    private void addDocumentToAccount() {
        webClient.step("Add a document");
        accountEditPage.edocs.select();
        accountEditPage.edocs.add();
        documentEditPage.documentBinary.upload("./src/test/resources/for_upload.txt");
        documentEditPage.ok();
    }

    private void saveToDatabase(String userName) {
        webClient.step("Save to database");
        accountEditPage.save();
        accountSearchPage.hasMessage("Saved " + userName + " successfully in database");
    }

    private void loginAsPreviouslyModifiedUser() {
        webClient.step("Let's try to log as cnorris as set previously");
        anonymousHomePage.connexion();
        loginPage.login("cnorris", "kickass");
        loggedHomePage.accounts();
    }

    private void revertChangesDoneToUser(String userName) {
        webClient.step("Select account and revert previous changes");
        loggedHomePage.accounts();
        accountSearchPage.searchByUsername("cnorris");
        accountSearchPage.hasText("gmail@chucknorris.com");
        accountSearchPage.edit("cnorris");
        accountSearchPage.hasText("Username");
        accountEditPage.update(userName, userName, userName + "@example.com");
        accountEditPage.edocs.select();
        accountEditPage.edocs.remove("for_upload.txt");
        accountEditPage.hasMessage("for_upload.txt: Removed, but not saved in database");
        accountEditPage.securityRoles.select();
        accountEditPage.securityRoles.remove("ROLE_ADMIN");
        accountEditPage.hasMessage("ROLE_ADMIN: Removed, but not saved in database");
        accountEditPage.securityRoles.remove("ROLE_GOD");
        accountEditPage.hasMessage("ROLE_GOD: Removed, but not saved in database");
        accountEditPage.save();
        accountSearchPage.hasMessage("Saved " + userName + " successfully in database");
        loggedHomePage.home();
        loggedHomePage.roles();
        roleSearchPage.delete("ROLE_GOD");
        roleSearchPage.hasMessage("Suppressed ROLE_GOD successfully from database");
    }
}
