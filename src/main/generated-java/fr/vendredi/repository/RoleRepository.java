/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to purchase Celerio ? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Template pack-backend-jpa:src/main/java/project/repository/Repository.e.vm.java
 */
package fr.vendredi.repository;

import static org.apache.commons.lang.StringUtils.isBlank;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import org.springframework.transaction.annotation.Transactional;
import fr.vendredi.dao.RoleDao;
import fr.vendredi.domain.Role;
import fr.vendredi.repository.support.GenericRepository;

/**
 * Note: you may use multiple DAO from this layer.
 */
@Named
@Singleton
public class RoleRepository extends GenericRepository<Role, Integer> {

    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
    protected RoleRepository() {
        super();
    }

    @Inject
    public RoleRepository(RoleDao roleDao) {
        super(roleDao);
    }

    @Override
    public Role getNew() {
        return new Role();
    }

    @Override
    public Role getNewWithDefaults() {
        Role result = getNew();
        result.initDefaultValues();
        return result;
    }

    @Override
    @Transactional(readOnly = true)
    public Role get(Role model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }
        if (isBlank(model.getRoleName())) {
            Role result = getByRoleName(model.getRoleName());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * Return the persistent instance of {@link Role} with the given unique property value roleName,
     * or null if there is no such persistent instance.
     *
     * @param roleName the unique value
     * @return the corresponding {@link Role} persistent instance or null
     */
    @Transactional(readOnly = true)
    public Role getByRoleName(String roleName) {
        return findUniqueOrNone(new Role().roleName(roleName));
    }

    /**
     * Delete a {@link Role} using the unique column roleName
     *
     * @param roleName the unique value
     */
    @Transactional
    public void deleteByRoleName(String roleName) {
        delete(getByRoleName(roleName));
    }
}